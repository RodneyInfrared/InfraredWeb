// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tk14VmZD6JAcm2qRqNW5xk
// Component: CG9VAMwhLNZxzn

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: SRHL15WvJ6eH5m/component
import Button from "../../Button"; // plasmic-import: vVLflfpdjNMmSO/component
import Section from "../../Section"; // plasmic-import: hDmufEjeJ0xVhN/component
import TextInput from "../../TextInput"; // plasmic-import: AP6lZeDbS6T4Ab/component
import FooterSection from "../../FooterSection"; // plasmic-import: ERk_5z9EMv-Pjx/component

import { useScreenVariants as useScreenVariantsaEvo4SWs5YfHIr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AEvo4SWs5YfHIr/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_light_saa_s_landing_page.module.css"; // plasmic-import: tk14VmZD6JAcm2qRqNW5xk/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: CG9VAMwhLNZxzn/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Q7OiYJoCwzUqR5/icon
import Searchsvg2Icon from "./icons/PlasmicIcon__Searchsvg2"; // plasmic-import: hoxQVjAcaWpjY9/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Cc9yTUwUCujXTG/icon
import heroImgpng08NYp3ZhKfY0Ob from "./images/heroImgpng.png"; // plasmic-import: 08nYp3ZHKfY0Ob/picture
import tickCirclesvgD2TcdOAtrLgoC from "./images/tickCirclesvg.svg"; // plasmic-import: d2TcdOAtrLGO-C/picture
import frame10PngPsj5UzHzol8Vnb from "./images/frame10Png.png"; // plasmic-import: PSJ5uzHzol8VNB/picture
import image6PngXhOdAgbYxjPpE5 from "./images/image6Png.png"; // plasmic-import: XHOdAgbYXJPpE5/picture

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  headerHeroSection?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  svg?: p.Flex<"svg">;
  columns?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  textInput?: p.Flex<typeof TextInput>;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaEvo4SWs5YfHIr()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"headerHeroSection"}
              data-plasmic-override={overrides.headerHeroSection}
              hasGap={true}
              className={classNames(projectcss.all, sty.headerHeroSection)}
            >
              {true ? (
                <Navbar
                  data-plasmic-name={"navbar"}
                  data-plasmic-override={overrides.navbar}
                  className={classNames("__wab_instance", sty.navbar)}
                />
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__xvGtH)}>
                <div className={classNames(projectcss.all, sty.freeBox__c58Xa)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__iuQn
                    )}
                  >
                    {"Infrared Web Designers"}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d7QTh
                    )}
                  >
                    {
                      "We Design web applications for small local business, that look as professional as large organizations."
                    }
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__eCbv)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__bynDu
                      )}
                      color={"blue" as const}
                      endIcon={
                        <ChevronRightIcon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      }
                      link={"#" as const}
                      showEndIcon={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qcuaR
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Try demo for free"
                          : "Order Services"}
                      </div>
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__z6VRh
                      )}
                      color={"blueBorder" as const}
                      link={"#" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yr019
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Learn More"
                          : "Learn More"}
                      </div>
                    </Button>
                  </p.Stack>
                </div>
              </div>
            </p.Stack>
          ) : null}
          <Section
            className={classNames("__wab_instance", sty.section__usN9A)}
            size={
              hasVariant(globalVariants, "screen", "mobile")
                ? ("fullContentWidth" as const)
                : ("fullContentWidth" as const)
            }
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__kEski)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"1140px" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: heroImgpng08NYp3ZhKfY0Ob,
                fullWidth: 2280,
                fullHeight: 1400,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__fEi0R)}>
              <div className={classNames(projectcss.all, sty.freeBox__cvA2Q)}>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__vAuK5)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__p9NF9
                      )}
                    >
                      {"99%"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jpYei
                      )}
                    >
                      {"Open Rates"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__zvRwJ)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__a3WsK
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "5,2X"
                        : "5,2X"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vgm5O
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Average traffic increase"
                        : "Average TRAFFIC INCREASE"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___3Xht7)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__wApKj
                      )}
                    >
                      {"5000+"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5HBz
                      )}
                    >
                      {"Hours of Experience"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Section>
          <Section
            background={"darkBlue" as const}
            className={classNames("__wab_instance", sty.section__sk9GP)}
            size={
              hasVariant(globalVariants, "screen", "mobile")
                ? ("fullContentWidth" as const)
                : ("fullContentWidth" as const)
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__hzkaK)}>
              <div className={classNames(projectcss.all, sty.freeBox__vd1Tq)}>
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Lorem Ipsum"
                    : "Website Hosting"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6KVhZ
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex."
                    : "Not only do we provide professional web design, we also provide top tier web hosting with Cloudflare DDOS protection."}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__e3Wui)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yyPtl)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__djCtt)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? ("24px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: tickCirclesvgD2TcdOAtrLgoC,
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dllds)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nnoEg
                      )}
                    >
                      {"PHP Databases"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mqEi)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4Gvka)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___6UgN)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? ("24px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: tickCirclesvgD2TcdOAtrLgoC,
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__w47Wu)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hMpvp
                      )}
                    >
                      {"Multiple Domains"}
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4T0HL)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lcSbG)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___1U7Kw)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? ("24px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: tickCirclesvgD2TcdOAtrLgoC,
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3HItj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xmB4A
                      )}
                    >
                      {"Cheap Services"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__oox5B)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__woh70)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__vIwlH)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? ("24px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: tickCirclesvgD2TcdOAtrLgoC,
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___02XcY)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jdI3U
                      )}
                    >
                      {"Fast delivery from our experienced dev-team"}
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__twtC9)}>
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__e1WNx)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("100%" as const)
                        : ("700px" as const)
                    }
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("174px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("284px" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("100%" as const)
                        : ("1440px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: frame10PngPsj5UzHzol8Vnb,
                      fullWidth: 1070,
                      fullHeight: 1402,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__edMvo)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: heroImgpng08NYp3ZhKfY0Ob,
                      fullWidth: 2280,
                      fullHeight: 1400,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
              </div>
            </div>
          </Section>
          <Section
            background={"blue" as const}
            className={classNames("__wab_instance", sty.section__am8EK)}
            size={
              hasVariant(globalVariants, "screen", "mobile")
                ? ("fullContentWidth" as const)
                : ("fullContentWidth" as const)
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__p9Ovm)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__b61Gq
                )}
              >
                {"Stay Updated"}
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___70JIu
                )}
              >
                {"Get updates on the Infrared Web design  business. "}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xMzgJ)}
              >
                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  className={classNames("__wab_instance", sty.textInput)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, ["textInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  value={p.generateStateValueProp($state, [
                    "textInput",
                    "value"
                  ])}
                />

                <Button
                  className={classNames("__wab_instance", sty.button__sMAjI)}
                  color={"blue" as const}
                  link={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mvThV
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Subscribe"
                      : "Subscribe"}
                  </div>
                </Button>
              </p.Stack>
            </div>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___9M0W)}
              displayHeight={"auto" as const}
              displayMaxHeight={"700px" as const}
              displayMaxWidth={"1140px" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: image6PngXhOdAgbYxjPpE5,
                fullWidth: 2880,
                fullHeight: 900,
                aspectRatio: undefined
              }}
            />
          </Section>
          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "navbar",
    "svg",
    "columns",
    "h2",
    "textInput",
    "footerSection"
  ],
  headerHeroSection: ["headerHeroSection", "navbar", "svg"],
  navbar: ["navbar"],
  svg: ["svg"],
  columns: ["columns"],
  h2: ["h2"],
  textInput: ["textInput"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  navbar: typeof Navbar;
  svg: "svg";
  columns: "div";
  h2: "h2";
  textInput: typeof TextInput;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    navbar: makeNodeComponent("navbar"),
    svg: makeNodeComponent("svg"),
    columns: makeNodeComponent("columns"),
    h2: makeNodeComponent("h2"),
    textInput: makeNodeComponent("textInput"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
