// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tk14VmZD6JAcm2qRqNW5xk
// Component: D8ahCr_G5y

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: SRHL15WvJ6eH5m/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_light_saa_s_landing_page.module.css"; // plasmic-import: tk14VmZD6JAcm2qRqNW5xk/projectcss
import sty from "./PlasmicContact.module.css"; // plasmic-import: D8ahCr_G5y/css

export type PlasmicContact__VariantMembers = {};
export type PlasmicContact__VariantsArgs = {};
type VariantPropType = keyof PlasmicContact__VariantsArgs;
export const PlasmicContact__VariantProps = new Array<VariantPropType>();

export type PlasmicContact__ArgsType = {};
type ArgPropType = keyof PlasmicContact__ArgsType;
export const PlasmicContact__ArgProps = new Array<ArgPropType>();

export type PlasmicContact__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  form?: p.Flex<typeof FormWrapper>;
  input?: p.Flex<typeof AntdInput>;
  input2?: p.Flex<typeof AntdInput>;
  textArea?: p.Flex<typeof AntdTextArea>;
  button?: p.Flex<typeof AntdButton>;
};

export interface DefaultContactProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicContact__RenderFunc(props: {
  variants: PlasmicContact__VariantsArgs;
  args: PlasmicContact__ArgsType;
  overrides: PlasmicContact__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        <Navbar
          data-plasmic-name={"navbar"}
          data-plasmic-override={overrides.navbar}
          className={classNames("__wab_instance", sty.navbar)}
        />

        <FormWrapper
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          className={classNames("__wab_instance", sty.form)}
          extendedOnValuesChange={p.generateStateOnChangeProp($state, [
            "form",
            "value"
          ])}
          labelCol={{ span: 8, horizontalOnly: true }}
          layout={"vertical" as const}
          wrapperCol={{ span: 16, horizontalOnly: true }}
        >
          <FormItemWrapper
            className={classNames("__wab_instance", sty.formItem__eNusu)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iEvKg
                )}
              >
                {"Name"}
              </div>
            }
            name={"name" as const}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input),
                onChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["input", "value"],
                  AntdInput_Helpers
                ),
                value: p.generateStateValueProp($state, ["input", "value"])
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"input"}
                  data-plasmic-override={overrides.input}
                  {...child$Props}
                />
              );
            })()}
          </FormItemWrapper>
          <FormItemWrapper
            className={classNames("__wab_instance", sty.formItem__omTc)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zuKLp
                )}
              >
                {"Company Contact and Company Name"}
              </div>
            }
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input2),
                onChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["input2", "value"],
                  AntdInput_Helpers
                ),
                value: p.generateStateValueProp($state, ["input2", "value"])
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input2.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"input2"}
                  data-plasmic-override={overrides.input2}
                  {...child$Props}
                />
              );
            })()}
          </FormItemWrapper>
          <FormItemWrapper
            className={classNames("__wab_instance", sty.formItem__o93E)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l1LHc
                )}
              >
                {"Message"}
              </div>
            }
            name={"message" as const}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.textArea),
                onChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["textArea", "value"],
                  AntdTextArea_Helpers
                ),
                value: p.generateStateValueProp($state, ["textArea", "value"])
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "textArea.value"
                  }
                ],
                [],
                AntdTextArea_Helpers ?? {},
                child$Props
              );

              return (
                <AntdTextArea
                  data-plasmic-name={"textArea"}
                  data-plasmic-override={overrides.textArea}
                  {...child$Props}
                />
              );
            })()}
          </FormItemWrapper>
          <FormItemWrapper
            className={classNames("__wab_instance", sty.formItem___2V8J)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bFwx
                )}
              >
                {"Label"}
              </div>
            }
            noLabel={true}
          >
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              submitsForm={true}
              type={"primary" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q71G6
                )}
              >
                {"Submit"}
              </div>
            </AntdButton>
          </FormItemWrapper>
        </FormWrapper>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "form", "input", "input2", "textArea", "button"],
  navbar: ["navbar"],
  form: ["form", "input", "input2", "textArea", "button"],
  input: ["input"],
  input2: ["input2"],
  textArea: ["textArea"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  textArea: typeof AntdTextArea;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContact__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContact__VariantsArgs;
    args?: PlasmicContact__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContact__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContact__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContact__ArgProps,
          internalVariantPropNames: PlasmicContact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    textArea: makeNodeComponent("textArea"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
